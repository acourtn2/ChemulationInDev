//ethene
var scene, camera;
var atom1, atom2, atom3, atom4, atom5, atom6, bond1, bond2, bond3, bond4, bond5, bond6, bond7, bond8;

init();
animate();

function init() {
    scene = new THREE.Scene();
    var canvas = $('#canvas3d');

    renderer = new THREE.WebGLRenderer({
        canvas: canvas.get(0),
        antialias: true
    });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x121224, 1);

    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 10000);
    camera.name = 'camera';
    scene.add(camera);

    var xc = 3 + 2.458646617;
    var yc = 2.458646617 * Math.sqrt(3);
    //var ang = Math.atan(zc / 3);
    atom1 = placeAtom(1, "C1", 3, 0, 0, scene);
    atom2 = placeAtom(1, "C2", -3, 0, 0, scene);
    atom3 = placeAtom(1, "C3", xc, yc, 0, scene);
    atom4 = placeAtom(1, "C4", xc, -yc, 0, scene);
    atom5 = placeAtom(1, "C5", -xc, yc, 0, scene);
    atom6 = placeAtom(1, "C6", -xc, -yc, 0, scene);
    /*bond1 = bondAtom(atom1, atom2, .1, scene, -3, yc, 0, -ang);
    bond2 = bondAtom(atom2, atom3, .1, scene, 1, 0, ang, 0);
    bond6 = bondAtom(atom6, atom1, .1, scene, 3, yc, 0, ang);
    bond3 = bondAtom(atom3, atom4, .1, scene, 3, yc, 0, ang);
    bond4 = bondAtom(atom4, atom5, .1, scene, -3, yc, 0, -ang);
    bond5 = bondAtom(atom5, atom6, .1, scene, 1, 0, ang, 0);*/
    bond1 = doubleBondAtom(atom1, atom2, .2, scene);
    bond2 = bondAtom(atom1, atom3, .2, scene);
    //bond6 = bondAtom(atom2, atom1, .2, scene);
    bond3 = bondAtom(atom1, atom4, .2, scene);
    bond4 = bondAtom(atom2, atom5, .2, scene);
    bond5 = bondAtom(atom2, atom6, .2, scene);
    /*moveBond(bond1, .25);
    moveBond(bond6, -.25);*/
	//scene.remove(bond1);
    //scene.remove(bond6);
    var pos = new THREE.Vector3(0, 0, 0);
    camera.position.set(pos.x, pos.y, pos.z + 20);
    camera.lookAt(pos);

    controls = new THREE.TrackballControls(camera, renderer.domElement);
    controls.target.set(pos.x, pos.y, pos.z);

    var light = new THREE.AmbientLight(0x404040);
    scene.add(light);

    var pointLight = new THREE.PointLight(0xffffff, 0.8, 0);
    camera.add(pointLight);
    camera = scene.getObjectByName('camera');
    renderer.render(scene, camera);
}

function doubleBondAtom(atomA, atomB, thickness, scene) {
    var x = (atomA.position.x - atomB.position.x);
    var y = (atomA.position.y - atomB.position.y);
    var z = (atomA.position.z - atomB.position.z);
    var height = Math.sqrt((x * x) + (y * y) + (z * z));
    var geometry = new THREE.CylinderGeometry(thickness, thickness, height);
    geometry.applyMatrix(new THREE.Matrix4().makeRotationX( THREE.Math.degToRad(90)));
    var mat = new THREE.MeshPhongMaterial({
        color: 0xffff00,
        side: THREE.DoubleSide
    });
    
    var cylinder1 = new THREE.Mesh(geometry, mat);
    var cylinder2 = new THREE.Mesh(geometry, mat);
    cylinder1.position.x = (atomA.position.x + atomB.position.x) / 2;
    cylinder1.position.y = (atomA.position.y + atomB.position.y) / 2;
    cylinder1.position.z = (atomA.position.z + atomB.position.z) / 2;
    cylinder1.lookAt(atomA.position);
	cylinder1.position.x += thickness;
    cylinder1.position.y += thickness;
    cylinder1.position.z += thickness;
    
    cylinder2.position.x = (atomA.position.x + atomB.position.x) / 2;
    cylinder2.position.y = (atomA.position.y + atomB.position.y) / 2;
    cylinder2.position.z = (atomA.position.z + atomB.position.z) / 2;
    cylinder2.lookAt(atomA.position);
	cylinder2.position.x -= thickness;
    cylinder2.position.y -= thickness;
    cylinder2.position.z -= thickness;
    
    
    scene.add(cylinder1);
    scene.add(cylinder2);
    //bonds[[atomA, atomB]] = [cylinder1, cylinder2];
    return [cylinder1, cylinder2];
}

function placeAtom(radius, symbol, xStart, yStart, zStart, scene) {
    var sphere = new THREE.SphereGeometry(radius, 20, 20);
    var mat = new THREE.MeshPhongMaterial({
        color: 0xff0000,
        side: THREE.DoubleSide
    });
    var atom = new THREE.Mesh(sphere, mat);
    atom.translateX(xStart);
    atom.translateY(yStart);
    atom.translateZ(zStart);
    scene.add(atom);
    return atom;
}

function bondAtom(atomA, atomB, thickness, scene) {
    var x = (atomA.position.x - atomB.position.x);
    var y = (atomA.position.y - atomB.position.y);
    var z = (atomA.position.z - atomB.position.z);
    var height = Math.sqrt((x * x) + (y * y) + (z * z));
    var geometry = new THREE.CylinderGeometry(thickness, thickness, height);
    var mat = new THREE.MeshPhongMaterial({
        color: 0xffff00,
        side: THREE.DoubleSide
    });
    var cylinder = new THREE.Mesh(geometry, mat);
    cylinder.position.x = (atomA.position.x + atomB.position.x) / 2;
    cylinder.position.y = (atomA.position.y + atomB.position.y) / 2;
    cylinder.position.z = (atomA.position.z + atomB.position.z) / 2;
    //cylinder.rotation.z = Math.atan(-vx / vy);
    //cylinder.rotation.y = ry;
    //cylinder.rotation.x = rx;
    
    cylinder.rotation.z = Math.atan(-x/y);
    //cylinder.rotation.y = Math.atan(-z/x);
    if (y != 0)
        cylinder.rotation.x = Math.atan(z/y);
    else
        cylinder.rotation.y = Math.atan(-z/x);
    scene.add(cylinder);
    return cylinder;
}

function moveAtom(atom,EpositionX,EpositionY,EpositionZ,resistance)
{

    if(atom.position.x != EpositionX)
    {
        atom.position.x += (EpositionX-atom.position.x)/(resistance);
    }
    if(atom.position.y !=EpositionY)
    {
        atom.position.y += (EpositionY-atom.position.y)/(resistance);
    }
    if(atom.position.z != EpositionZ)
    {
        atom.position.z +=(EpositionZ-atom.position.z)/(resistance);
    }
}

function moveBond(bond, change) {
    bond.position.y += change;
}

function moveMolecule(species, EpositionX, EpositionY, resistance) {
    if (species[0].position.x != EpositionX) {
        for (var i = 0; i < species.length; i++) {
            species[i].position.x += (EpositionX - species[0].position.x) / (resistance);
        }
    }
    if (species[0].position.y != EpositionY) {
        for (var i = 0; i < species.length; i++) {
            species[i].position.y += (EpositionY - species[0].position.y) / (resistance);
        }
    }
}


function animate() {
    requestAnimationFrame(animate);
    
    /*moveAtom(atom1, Math.sqrt(3), 0, -3*Math.sqrt(3)-1, 80);
    scene.remove(bond7);
    scene.remove(bond8);
    bond7 = bondAtom(atom1, atom2, 0.2, scene);
    bond8 = bondAtom(atom6, atom1, 0.2, scene); */
    controls.update();
    renderer.render(scene, camera);
}
